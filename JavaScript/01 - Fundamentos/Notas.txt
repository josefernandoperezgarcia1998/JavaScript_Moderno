******9.- Hola mundo:******

1.-Se puede introducir codigo JS de diferentes formas
Por medio de un archivo independiente .js
Por medio de incrustar una etiqueta script en el html
Por medio de entrar node y escribir el código js
Por medio de entrar node y ejecutar el archivo
Por medio de la consola









******10.- Introducción a variables y comentarios******

Variables: Es un contenedor de información que apunta a un lugar en memoria. Una variable puede cambiar ó no su valor en un futuro.

let es lo que normalmente se debe de utilizar para declarar variables
var ya no se debería de usar para declerar variables
const es una constante que no se debe modificar su valor

Buena práctica para comentar (dejar un espacio entre los dos slash).

Polyfill: Se usa para ejecutar código moderno de js en versiones anteriores de js.









******11.-Introducción a la consola******
JavaScript es un lenguaje interpretado (de manera secuencial lee el código)

Para mostrar mensajes por consola se puede utilizar los siguientes métodos del objeto console

console.log
console.info
console.warn
console.alert
console.table

Ejemplo:
	console.log(x);
	console.log({x});
	console.table({a,b,c});










******12.-Depuración y breakpoints******
Un breakpoint es cuando nosotros queremos saber el estado de la aplicación ó que, queremos saber hasta
que punto del código nosotros queremos saber que ocurre, cual es el estado de las variables, etc.

Un breakpoint se activa desde la consola del navegador > Sources > Abrir el archivo .js
y seleccionar el número de la línea hasta donde se desea saber el estado del código.

También se puede depurar desde vscode, dando clic al numero de la línea de vscode, después se va a "Debug" > "Start debugging" > Node.js




















******13.-Orden y lugar de las importaciones******
1.-Se debe de poner el nombre de los scripts de JS en dos diferentes lugares,
bien puede ser hasta abajo (arriba de la etiqueta de cierre del body) ó dentro del head del html

2.-Es buena práctica poner los scripts de js hasta abajo antes del body (y otros de librerías etc en el head).

3.-No se debe usar el tipo de dato "var" porque forma parte del objeto global window.















******14.-Principal problema con la inicialización de variables con var******

1.-let y const no modifican las propiedades del objeto global "window", por otro lado var si lo hace

2.-Cualquier variable en JS que no tenga un valor lo denomina como "undefined"

3.-Se debe utilizar "var" solo para la compatibilidad con navegadores viejitos

4.-Se debe utilizar hoy en día let y const para definir nuestras variables.

















******15.-Prompt, alert y confirm******

0.5.-prompt(), alert() y confirm() vienen del objeto global windows

1.-En un "prompt" se puede recibir valores por el usuario: Vacíos '', definidos 'fer', ó null

2.-Null no es lo mismo que undefined

3.-En un "confirm" se puede confirmar o mostrar alguna pantalla al usuario si acepta o no acepta

4.-En node no existe el objeto "window"

















******19.-Tipos de datos primitivos******

JS es débilmente tipado, o sea no te exige que sea "int", "double", etc al momento de declararla
Primitivo: Es una información que no es un objeto y son inmutables

Tipos de datos (6):
Boolean - True/False :: Verdadero/Falso
Null - Sin valor en lo absoluto
Undefined - Una variable declarada que todavía no contiene un valor ó se le asigna un valor
Number - En JS solamente exise un tipo de valor y es "number", son integers, floats, etc
String - Una cadena de caracteres, P. ej. palabras, nombre de personas
Symbol - Es un valor único que no es igual a ningún otro valor.












******20.-Introducción general a los tipos primitivos******

=> Ver archivo primitivos.js
















******21.-Palabras reservadas y nombre de variables******

1.-Es mala práctica crear archivos con camelcase, se recomienda hacerlo con un "-"
p.ej. "crear-pizza.js" es correcto PERO es mala práctica hacer "crearPizza.js"


2.-Una palabra reservada son palabras que tienen un uso significado.

3.-No crar variables iniciando con numeros

4.-Se recomienda nombrar variables con camelCase (pizzaGrande)

5.-En JS cuando se tiene un punto "objeto.metodo" se refiere cuando se quiere acceder al método de un objeto

6.-Nombrar las variables con un nombre significativo y en lowerCamelCase.

7.-Para nombrar clasese de UppercamelCase














******22.-Arreglos******

1.-Arreglos: Son un objeto muy parecido a una lista de información que contiene un grupo de elementos.

2.-Usualmente, esa información dentro del arreglo es del mismo tipo de dato.




















******23.-Más detalles sobre los arreglos******
-Ver script arreglo2.js

















******24.-Objetos literales******
1.-En JavaScript las "{}" es un objeto literal
2.-Un objeto lit. es un objeto que tiene pares de valores 
	key: value
3.-Para crear un objeto se tiene la sig. estructura

let variable = {
	clave: valor,
}

4.- En un objeto literal se puede agregar tanto strings, number, objetos, arreglos, etc

5.-En un objeto literal si se requiere "tener un nombre de valor con caracter especial" 
se debe de poner de la siguiente forma: 'nombre-especial', haciendo referencia a que se 
debe de crear con comillas simples y con separación de guión medio

6.-Para acceder a las propiedades de un objeto literario se puede utilizar el "." p. ej.
objeto.propiedad

6.-Si se requiere acceder al valor de una propiedad (ejemplo que el objeto tenga una propiedad que sea otro objeto o arreglo)
se puede acceder de la misma forma del ".", p. ej.
objeto.propiedad.propiedad

*ver script "objeto-literal.js"















******24.-Más detalles sobre objetos literales******

1.-Para eliminar una propiedad de un objeto se puede usar la palabra reservada "delete" p. ej.
"delete objeto.propiedad"

2.-Para poder saber el índice de las propiedades de un objeto se puede hacer por medio de "Object.entries()"

3.-Para bloquear que alguien "modifique" los valores de las propiedades del objeto se utiliza "Objet.freeze()"

4.-Para evitar que se modifique un objeto se puede utilizar como "const" el objeto

5.-PAra obtener las propiedades de un objeto se puede acceder con "Object.getOwnPropertyNames()";


6.-PAra obtener los valores de un objeto se puede acceder con "Object.values()";



























******25.-funciones básica y de flecha******
1.-Centrar la lógica de un procedimiento que podemos ejecutar varias veces.

2.-Las funciones deben hacerse siempre hasta arriba del script

3.-Una función anonima: Su beneficio es que la función como tal no lleva un nombre, sino que ahora lo lleva una variable
	se puede declarar de esta forma
	const variable = function() {
		Código...
	}

4.-Las funciones de flecha son un pco más eficiente a comparación de las funciones normales

5.-Las arrow function son conocidas también como funciones anónimas/lambda





























******26.-Retorno de las funciones******

1.-Una función retorna undefined

2.-En JS si no se pone return en una función, se retorna undefined

3.-Una función no va a leer nada que esté después de un "return"

4.-En una funcion se puede retornar un arreglo

5.-Las funciones de flecha son anonimas y funciones de flecha normales

function normal flecha: const variable = function() => { 
		.....
	}

function anonima flecha: const variable = () => {
		.....
	}






















******27.-Pro tip: Funciones, argumentos y destructuración de objetos******
<VER SCRIPT>





















******28.-Valor referencia y romper la referencia******

1.-En JS todo es un objeto
2.-En JS los valores primitivos se manejan por valor 
3.-En JS los objetos se manejan por referencia
4.-Cuando se usa {...propiedad} se le conoce como "spread"
5.-Cuando se usa ({...argumento/propiedad}) de una función flecha se le conoce como "rest"
6.-Con el rest y spread se permite romper la referencia por como se usan las asignaciones 
7.-El romper la referencia se refiere a que, vamos a dejar que JS interprete que dos mismas variables con el mismo valor tienen el mismo espacio de memoria y cada uno será independiente
8.-El método slice() permite romper la referencia pero es tardado
9.-El usar el "spread" permite romper la referencia pero es más rápido



























******29.-if else******
1.- "new" permite crear una nueva instancia de un objeto
2.-El === significa evaluar que no solos los valores internos sean los mismos, sino el tipado tiene que ser identico 
	p.ej: 5 (number) tiene que ser identico a otro 5 number


	5 === 5 : Cierto
	5 === '5': falso
	5 == '5': Cierto
	5 == 5: Cierto
	5 = 5 error

 
3.-El == significa querer confirmar si el valor es el mismo al que se está comparando y no me importa el tipo (number, string, etc)




















******30.-Laboratorio - Alternativa de if-else******
1.-Aprendí en este laboratorio que, en vez de usar if y else para saber el día de la semana se pueden
	utilizar objetos y arreglos, ya que el indice del objeto y arreglo pudo ser clave.























******31.- Lógica booleana******

El operador NOT sirve para negar (Lo contrario a esto)
El operador AND sirve para comparar (si esto y esto)
El operador OR sirve para comparar (si esto o esto)



















******32.- Pro tip: Asignaciones con operadores ******
>Ver script<


















******33.-Operador condicional ternario ******
1.-El operador ternario es lo mismo que un if pero de forma simplificada
	condición ? asignación : otra_asignación

















******34.-Pro tip: Otros usos del operador ternario ******

1.-Se puede hacer un operador ternario anidado
2.-Se puede usar en arreglos
3.-Se puede usar en arrow functions















******35.- Switch******

<Ver script>
















******36.- While y Do-While******
1.-El while es lo mismo que el do while, con la excepción de que el do while se ejecuta si o si la primera vez
2.-Una manera más limpia de poner las condicionales del while/do-while es "variable[iterador]"
3.-JS determina falso a los siguientes valores null, undefined y false en un ciclo while si se ponen en su condicion
4.-Si no existe un valor dentro de lo que se está comparando en la condición va a tirar undefinied

















******37.-Ciclos for ******
Ver scripts



















******************
***LABORATORIO BLACKJACK***
******************


******52.-Introducción al DOM y su manipulación******

Document Object Model: Obtener acceso a los elementos HTML y poder manipularlos 
























******62.-Patrón módulo******

1.-El patrón módulo es una arrow function autoinvocable (que se llama así misma) 
2.-El patrón módulo sirve para mantener el código "protegido"
3.-Puede utilizarse dentro del patrón módulo una línea de código 'use strict', eso funciona para que JS se ponga de forma estricta con nuestro código, evitar errores....



































******72.-Clases básicas en JS******
1.-Para crear una clase se debe de crear iniciando primero con la primer letra en mayuscula y usanto el UpperCamelCase
2.-El método constructor es más que nada el primer método que se va a ejecuar cuando se haga una instancia de esa clase/objeto
3.-Una buena práctica es inicializar las propiedades de una clase al inicio de la misma, después de las llaves
4.-Cuando se quiere hacer referencia a las propiedades de una clse se utiliza "this.propiedad" para que el scope de JS pueda reconocer las propiedades





























******73.-Métodos en las clases******
1.-Se pueden crear métodos en una clase de la sig forma
nombreMetodo() {

....
}

2.se puede llamar un método dentro de la misma clase y dentro de un mismo método, así:

metodoUno() {



}

metodoDos() {

this.metodoUno();

}

3.-Para mandar a llamar un método de manera externa de la clase es por medio de el nombre de una variable y seguido del método:
variable.metodo();





















******73.-Gets y sets******
1.-Es opcional inicializar las propiedades de una clase seguido de las llaves... Se puede inicializar dentro del constructor de la misma.
2.-El set asigna 
3.-El get obtiene
4.-Nomenclatura para set y get "set setNombre(nombre){}" "get getNombre(){}"



















******75.-Propiedades, gets y métodos estáticos******
1.-Un método ó tipo/propiedad de propiedad estático es es cuando se requiere información de una clase SIN tener la necesidad de INSTANCIAR la clase.
2.-El static puede referirse con get (ver el script).



















******76.-Subclases******

1.-Para heredar de una clase en js se utiliza el "extends"
2.-En las subclases se puede crear un constructor, siempre y cuando se llame al instante al constructor de la clase padre donde se hereda
3.-Se puden utilizar los mismos métodos de una clase padre dentro de una hija por medio de "super.nombreMetodo()"
